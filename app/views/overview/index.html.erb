<%= stylesheet_link_tag "leaflet", :media => "all" %>
<%= javascript_include_tag "leaflet" %>

<div id="mapid"></div>

<script type="text/javascript">

    var companiesInternship = JSON.parse('<%= @company_location_json %>')
    var mymap = L.map('mapid').setView([52.4569311, 13.5242551], 2);
    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
        id: 'mapbox.streets',
        accessToken: 'pk.eyJ1IjoiaW1pbWFwIiwiYSI6ImNqNHppOG5jMzIzNm4yd3A4bG1obGRpbDAifQ.iXbEsLQvC940jdiIWgTfBw',
        minZoom: 2,
        maxZoom: 16
    }).addTo(mymap);

    for (var i = 0; i < companiesInternship.length; i++) {
        marker = new L.marker([companiesInternship[i][1], companiesInternship[i][2]])
            .bindPopup(companiesInternship[i][0])
            .addTo(mymap);
    }

</script>

<%= yield :scripts %>

<br/>


<%= form_tag(quicksearches_path, :method => 'get', :remote => true) do %>

    <table class="table_block start_block">
      <tr>
        <p><%= t "search.criteria" %></p>
      </tr>
      <tr class="table_block">
        <td id="country_td" class="table_block"><%= select_tag :country, options_for_select((@companies.collect do |x|
          x.country
        end).uniq), {:multiple => true, class: 'chzn-select', 'data-placeholder' => t("choose.country")} %></td>
        <td id="semester_td" class="table_block"><%= select_tag :semester, options_for_select(@semesters.map do |s|
          [s.name, s.id]
        end), {:multiple => true, class: 'chzn-select', 'data-placeholder' => t("choose.semester")} %></td>
        <td id="orientation_td" class="table_block"><%= select_tag :orientation, options_for_select(@orientations), {:multiple => true, class: 'chzn-select', 'data-placeholder' => t("choose.orientation")} %></td>
        <td id="languages_td" class="table_block"><%= select_tag :programming_language_ids, options_for_select((@programming_languages.map do |p|
          [p.name, p.id]
        end)), {:multiple => true, class: 'chzn-select', 'data-placeholder' => t("choose.language")} %></td>
        <td class="table_block"><%= button_tag "", :name => nil, :class => "btn btn-success icon-white icon-search icon-large", :id => "search_button_overview" %></td>
        <td class="table_block reset"><%= button_tag t("helpers.reset"), :name => nil, :class => "btn btn-success", :id => "reset_chosen", :onclick => "click_reset();" %></td>
      </tr>
    </table>
<% end %>

<div class="row display_nonet display_none">
  <div class="span3" id="country_chart"></div>
  <div class="span3" id="orientation_chart"></div>
  <div class="span3" id="language_chart"></div>
</div>
<div class="row">
  <!--<div class="msgbox">-->
    <!--<a id="close" title="Close This" class="display_none display_nonet">X</a>-->
  <!--</div>-->

  <div id="results_string" style="display:none"></div>
  <div class="table-container">

    <table id="paginated" class="table table-head">
      <thead>
      <tr class="search-table">
        <th><%= t "internships.attributes.title" %></th>
        <th><%= t "internships.attributes.company" %></th>
        <th><%= t "companies.attributes.city" %> </th>
        <th><%= t "companies.attributes.country" %></th>
        <th><%= t "companies.attributes.industry" %></th>
        <th><%= t "internships.attributes.semester" %></th>
        <th><%= t "internships.attributes.orientation" %></th>
        <th><%= t "internships.attributes.programming_language" %></th>
        <th><%= t "internships.attributes.rating" %></th>
      </tr>
      </thead>
      <tbody>
      <% @internships.each do |internship| %>
          <tr class="<%= cycle("even_row", "odd_row") %>">
            <td><%= internship.title %></td>
            <td><%= internship.company.name %></td>
            <td><%= internship.company.city %></td>
            <td><%= internship.company.country %></td>
            <td><%= internship.company.industry %></td>
            <td><%= internship.semester.name %></td>
            <td><%= internship.orientation.name %></td>
            <td><%= internship.programming_languages.map {|n| n.name}.join(", ") %></td>
            <td><%= render_stars(internship.rating, self) %></td>
            <td><%= link_to "", internship, class: "icon-white icon-circle-arrow-right icon-2x button_intern" %></td>
          </tr>
      <% end %>

      </tbody>
    </table>
  </div>
</div>
<div class='pager' style="display:none;">
  <button href='' alt='First' class='firstPage'>First</button>
  <button href='' alt='Previous' class='prevPage'>Prev</button>

  <span class='currentPage'></span> of <span class='totalPages'></span>
  <button href='' alt='Next' class='nextPage'>Next</button>
  <button href='' alt='Last' class='lastPage'>Last</button>
</div>
<script>

    $('table#paginated').each(function () {
        var currentPage = 1;
        var numPerPage = 8;
        var $table = $(this);
        var numRows = $table.find('tbody tr').length;
        var numPages = Math.ceil(numRows / numPerPage);
        $table.bind('repaginate', function () {
            $(".currentPage").html(currentPage);
            $(".totalPages").html(numPages);
            $table.find('tbody tr').hide().slice((currentPage - 1) * numPerPage, (currentPage) * numPerPage).show();
            if (currentPage == 1) {
                $(".firstPage").hide();
            }
            else
                $(".firstPage").show();
            if (currentPage == numPages) {
                $(".lastPage").hide();
            }
            else
                $(".lastPage").show();
        });
        $table.trigger('repaginate');


        $(".firstPage").click(function () {
            currentPage = 1;
            $table.trigger('repaginate');
        });

        $(".lastPage").click(function () {
            currentPage = numPages;
            $table.trigger('repaginate');
        });

        $(".prevPage").click(function () {
            if (currentPage - 1 > 0)
                currentPage -= 1;
            $table.trigger('repaginate');
        });

        $(".nextPage").click(function () {
            if (currentPage < numPages)
                currentPage += 1;
            $table.trigger('repaginate');
        });

    });

    var color = d3.scale.category20();
    var color2 = d3.scale.category20();
    var color3 = d3.scale.category20();

    function sum(data) {
        var sum = 0;
        for (i = 0; i < data.length; i++) {
            sum += data[i].count;
        }
        return sum;
    }

    var margin = {top: 20, right: 20, bottom: 30, left: 40},
        width = 350 - margin.left - margin.right,
        height = 200 - margin.top - margin.bottom;

    var formatPercent = d3.format(".0%");

    var x = d3.scale.ordinal()
        .rangeRoundBands([0, width], .1);

    var y = d3.scale.linear()
        .range([height, 0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .tickFormat(formatPercent);

    var svg_country = d3.select("#country_chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var data_country = <%=raw @data_country.to_json%>;

    function compare(a, b) {
        if (a.count < b.count)
            return 1;
        if (a.count > b.count)
            return -1;
        return 0;
    }

    data_country.sort(compare);

    var data_country_5 = data_country.slice(0, 8);

    x.domain(data_country_5.map(function (d) {
        return d.name;
    }));
    y.domain([0, d3.max(data_country, function (d) {
        return d.count / sum(data_country);
    })]);

    svg_country.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .text("");

    svg_country.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("");

    var bar_country = svg_country.selectAll(".bar")
        .data(data_country_5)
        .enter()
        .append("g");

    bar_country.append("rect")
        .attr("class", "bar")
        .on("click", function (d) {
            var ary = [];
            if ($("#country").val() != null)
                ary = $("#country").val();
            ary.push(d.name);
            $("#country").val(ary);
            $("#country").trigger("liszt:updated");
        })
        .attr("x", function (d) {
            return x(d.name);
        })
        .attr("width", x.rangeBand())
        .attr("y", function (d) {
            return y(d.count / sum(data_country));
        })
        .attr("height", function (d) {
            return height - y(d.count / sum(data_country));
        })
        .style("fill", function (d) {
            return color(d.name);
        });

    bar_country.append("text")
        .on("click", function (d) {
            var ary = [];
            if ($("#country").val() != null)
                ary = $("#country").val();
            ary.push(d.name);
            $("#country").val(ary);
            $("#country").trigger("liszt:updated");
        })
        .attr("x", -height + 5)
        .attr("y", function (d) {
            return x(d.name) + 15;
        })
        .attr("transform", "rotate(-90)")
        .text(function (d) {
            return d.name
        });

    var svg_language = d3.select("#language_chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var data_language = <%=raw @data_language.to_json%>;

    data_language.sort(compare);

    var data_language_5 = data_language.slice(0, 8);

    x.domain(data_language_5.map(function (d) {
        return d.name;
    }));
    y.domain([0, d3.max(data_language, function (d) {
        return d.count / 100;
    })]);

    svg_language.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .text("");

    svg_language.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("");

    var bar_language = svg_language.selectAll(".bar")
        .data(data_language_5)
        .enter()
        .append("g");

    bar_language.append("rect")
        .attr("class", "bar")
        .on("click", function (d) {
            for (var j = 0; j < $("#programming_language_ids")[0].children.length; j++) {
                if ($("#programming_language_ids")[0].children[j].innerHTML == d.name) {
                    var ary = [];
                    if ($("#programming_language_ids").val() != null)
                        ary = $("#programming_language_ids").val();
                    ary.push($("#programming_language_ids")[0].children[j].value);
                    $("#programming_language_ids").val(ary);
                }
            }
            $("#programming_language_ids").trigger("liszt:updated");
        })
        .attr("x", function (d) {
            return x(d.name);
        })
        .attr("width", x.rangeBand())
        .attr("y", function (d) {
            return y(d.count / 100);
        })
        .attr("height", function (d) {
            return height - y(d.count / 100);
        })
        .style("fill", function (d) {
            return color2(d.name);
        });

    bar_language.append("text")
        .on("click", function (d) {
            for (var j = 0; j < $("#programming_language_ids")[0].children.length; j++) {
                if ($("#programming_language_ids")[0].children[j].innerHTML == d.name) {
                    var ary = [];
                    if ($("#programming_language_ids").val() != null)
                        ary = $("#programming_language_ids").val();
                    ary.push($("#programming_language_ids")[0].children[j].value);
                    $("#programming_language_ids").val(ary);
                }
            }
            $("#programming_language_ids").trigger("liszt:updated");
        })
        .attr("x", -height + 5)
        .attr("y", function (d) {
            return x(d.name) + 15;
        })
        .attr("transform", "rotate(-90)")
        .text(function (d) {
            return d.name
        });

    var svg_orientation = d3.select("#orientation_chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var data_orientation = <%=raw @data_orientation.to_json%>;

    data_orientation.sort(compare);

    var data_orientation_5 = data_orientation.slice(0, 8);

    x.domain(data_orientation_5.map(function (d) {
        return d.name;
    }));
    y.domain([0, d3.max(data_orientation, function (d) {
        return d.count / sum(data_orientation);
    })]);

    svg_orientation.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .text("");

    svg_orientation.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("");

    var bar_orientation = svg_orientation.selectAll(".bar")
        .data(data_orientation_5)
        .enter()
        .append("g");

    bar_orientation.append("rect")
        .attr("class", "bar")
        .on("click", function (d) {
            for (var j = 0; j < $("#orientation")[0].children.length; j++) {
                if ($("#orientation")[0].children[j].innerHTML == d.name) {
                    var ary = [];
                    if ($("#orientation").val() != null)
                        ary = $("#orientation").val();
                    ary.push($("#orientation")[0].children[j].value);
                    $("#orientation").val(ary);
                }
            }
            $("#orientation").trigger("liszt:updated");
        })
        .attr("x", function (d) {
            return x(d.name);
        })
        .attr("width", x.rangeBand())
        .attr("y", function (d) {
            return y(d.count / sum(data_orientation));
        })
        .attr("height", function (d) {
            return height - y(d.count / sum(data_orientation));
        })
        .style("fill", function (d) {
            return color3(d.name);
        });

    bar_orientation.append("text")
        .on("click", function (d) {
            for (var j = 0; j < $("#orientation")[0].children.length; j++) {
                if ($("#orientation")[0].children[j].innerHTML == d.name) {
                    var ary = [];
                    if ($("#orientation").val() != null)
                        ary = $("#orientation").val();
                    ary.push($("#orientation")[0].children[j].value);
                    $("#orientation").val(ary);
                }
            }
            $("#orientation").trigger("liszt:updated");
        })
        .attr("x", -height + 5)
        .attr("y", function (d) {
            return x(d.name) + 15;
        })
        .attr("transform", "rotate(-90)")
        .text(function (d) {
            return d.name
        });

</script>