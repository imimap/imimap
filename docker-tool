#!/usr/bin/env ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__))

require 'ci-cd/helpers'

module DockerTool
  require 'thor'
  require 'pty'

  class Common < Thor

    include CICD::Helpers::General

    @@root = File.dirname(File.expand_path(__FILE__))

    desc "build", "builds the specified environment"
    def build
      say "Building environment: #{environment}", :green
      in_environment(environment) do
        system_call "docker-compose -f #{path(@@root, "docker-compose-#{environment}.yml")} build"
      end

      confirm(question: "Do you want to start the #{environment} environment now?", color: :green, exit_code: 0) do
        start
      end
    end

    desc "start", "starts the specified environment"
    def start
      detached = false
      say "Starting environment: #{environment}", :green
      if environment == :test
        exit_status = 1
        in_environment(environment) do
         system("docker-compose -f docker-compose-#{environment}.yml run imimaps bundle exec rake spec")
         exit_status = $?.exitstatus
         system("docker-compose -f docker-compose-#{environment}.yml kill")
        end
        puts "EXIT STATUS: #{exit_status}"
        exit exit_status
      else
        in_environment(environment) do
          detached = confirm(question: "Do you want to run the containers in detached mode?", color: :green, exit_code: 0, exit_on_no: false) do
            true
          end

          system_call "docker-compose -f docker-compose-#{environment}.yml up #{detached ? '-d' : ''}"
        end
      end

      if not detached
        confirm(question: "Do you want to stop the containers of the #{environment} environment now?", color: :green, exit_code: 0) do
          stop
        end
      end
    end

    desc "stop", "stops the specified environment"
    def stop
      say "Stopping environment: #{environment}", :green
      in_environment(environment) do
        system_call "docker-compose -f #{path(@@root, "docker-compose-#{environment}.yml")} kill", suppress: true
      end
    end

    desc "test", "runs the test suite in the specified environment"
    def test
      say "Testing environment: #{environment}", :green
      in_environment(environment) do
        if !`docker ps | grep imimaps-#{environment}`.empty?
          exec "docker exec -ti imimaps-#{environment} bundle exec rake spec"
        else
          say "The Docker environment #{environment} is not running.", :red
          say "Please start the environment before trying to test.", :red
        end
      end
    end

    desc "enter", "enters a bash shell in the specified environment"
    def enter
        if !`docker ps | grep imimaps-#{environment}`.empty?
          say "Entering environment: #{environment}", :green
          exec "docker exec -ti imimaps-#{environment} bash"
        else
          say "The Docker environment #{environment} is not running.", :red
          say "Please start the environment before trying to enter a container", :red
        end
    end

    private

    def environment
      self.class.name.downcase.split("::").last.to_sym
    end

  end

  class Development < Common; end
  class Test < Common; end
  class Production < Common; end
  class Staging < Production; end

  class App < Thor
    class_option :verbose, type: :boolean, aliases: '-v', default: false
    class_option :dryrun, type: :boolean, aliases: '-d', default: false

    [:development, :test, :staging, :production].each do |environment|
      desc "#{environment} SUBCOMMAND", "manage the #{environment} environment"
      subcommand(environment, const_get("#{self.name.to_s.split("::").first}::#{environment.to_s.capitalize}"))
    end

  end
end

DockerTool::App.start(ARGV)


